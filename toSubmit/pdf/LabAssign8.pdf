

/*
1.	Write a program in C to display the sum of the series [ 1+x+x^2/2!+x^3/3!+....]
*/
#include <stdio.h>
#include <math.h>

double _inv_factorial(unsigned int num)
{
    long result = 1;
    if (num == 0)
        return 1;
    while (num != 1)
    {
        result *= num--;
    }
    return 1.0 / result;
}

int main()
{
    int iter = 0;
    int x, n;
    double result = 0;
    printf("Input x: ");
    scanf("%d", &x);
    printf("Input n: ");
    scanf("%d", &n);
    for (iter = 0; iter < n; iter++)
    {
        result += (pow(x, iter) * _inv_factorial(iter));
    }
    printf("%f" , result);
}



/*
2.	Write a C program to display the pattern of right angle triangle using an asterisk
*
**
***
****
*/

#include <stdio.h>

int main()
{
    int row = 5;
    int i = 0 , k = 0;
    for(i = 1 ; i <= row; i++)
    {
        for(k = 0 ; k < i; k++) 
            putc('*' , stdout);
        putc('\n' , stdout);
        fflush(stdout);
    }
}




/*
3.	Write a C program to display the pattern of  pyramid with a number which will repeat the number in the same row.

   1
  2 2
 3 3 3
4 4 4 4
*/

#include <stdio.h>

int main()
{
    const int input = 4;
    int i , j;
    for(i = 1 ; i <= input ; i++)
    {
        for( j = 0 ; j < input - i ; j++)
            putc(' ' , stdout);
        for(j = 0 ; j < i ; j++)
            printf("%d " , i);
        putc('\n' , stdout);
        fflush(stdout);
    }
}


/*
4.	Write a C program to check whether a given number is a perfect number or not.
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main()
{
    unsigned int divisor;
    unsigned int input;
    unsigned int sum = 1;
    char buff[9];
    fgets(buff, 9, stdin);
    input = strtol(buff, (char **)NULL, 10);
    for (divisor = 2; divisor <= (int)sqrt(input); divisor++)
    {
        if (input % divisor == 0)
        {
            sum += divisor;
            sum += input/divisor;
        }
    }
    if (sum == input)
        printf("Perfect Number\n");
}



/*
5.	Write a C program to count the number of blanks, tabs and newlines in the input (Switch case can be used)
*/


#include <stdio.h>
#include <stdlib.h>

int main()
{
    int blanks = 0, tabs = 0, new_lines = 0;
    char ch = 0;
    while (ch != EOF)
    {
        ch = getc(stdin);
        switch (ch)
        {
        case ' ':
            blanks++;
            break;
        case '\t':
            tabs++;
            break;
        case '\n':
            new_lines++;
            break;
        default:
            break;
        }
    }
    printf("Blanks: %d, Tabs: %d, New Lines: %d." , blanks , tabs , new_lines);
}